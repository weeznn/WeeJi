package com.weeznn.weeji.util.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weeznn.weeji.util.db.entry.Meeting;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEETING".
*/
public class MeetingDao extends AbstractDao<Meeting, Long> {

    public static final String TABLENAME = "MEETING";

    /**
     * Properties of entity Meeting.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _metID = new Property(0, long.class, "_metID", true, "_id");
        public final static Property Time = new Property(1, String.class, "time", false, "TIME");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Sub = new Property(3, String.class, "sub", false, "SUB");
        public final static Property Keyword1 = new Property(4, String.class, "keyword1", false, "KEYWORD1");
        public final static Property Keyword2 = new Property(5, String.class, "keyword2", false, "KEYWORD2");
        public final static Property Keyword3 = new Property(6, String.class, "keyword3", false, "KEYWORD3");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property Modetator = new Property(8, String.class, "modetator", false, "MODETATOR");
    }


    public MeetingDao(DaoConfig config) {
        super(config);
    }
    
    public MeetingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEETING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: _metID
                "\"TIME\" TEXT," + // 1: time
                "\"TITLE\" TEXT," + // 2: title
                "\"SUB\" TEXT," + // 3: sub
                "\"KEYWORD1\" TEXT," + // 4: keyword1
                "\"KEYWORD2\" TEXT," + // 5: keyword2
                "\"KEYWORD3\" TEXT," + // 6: keyword3
                "\"ADDRESS\" TEXT," + // 7: address
                "\"MODETATOR\" TEXT);"); // 8: modetator
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEETING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Meeting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_metID());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String sub = entity.getSub();
        if (sub != null) {
            stmt.bindString(4, sub);
        }
 
        String keyword1 = entity.getKeyword1();
        if (keyword1 != null) {
            stmt.bindString(5, keyword1);
        }
 
        String keyword2 = entity.getKeyword2();
        if (keyword2 != null) {
            stmt.bindString(6, keyword2);
        }
 
        String keyword3 = entity.getKeyword3();
        if (keyword3 != null) {
            stmt.bindString(7, keyword3);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String modetator = entity.getModetator();
        if (modetator != null) {
            stmt.bindString(9, modetator);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Meeting entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_metID());
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(2, time);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String sub = entity.getSub();
        if (sub != null) {
            stmt.bindString(4, sub);
        }
 
        String keyword1 = entity.getKeyword1();
        if (keyword1 != null) {
            stmt.bindString(5, keyword1);
        }
 
        String keyword2 = entity.getKeyword2();
        if (keyword2 != null) {
            stmt.bindString(6, keyword2);
        }
 
        String keyword3 = entity.getKeyword3();
        if (keyword3 != null) {
            stmt.bindString(7, keyword3);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String modetator = entity.getModetator();
        if (modetator != null) {
            stmt.bindString(9, modetator);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Meeting readEntity(Cursor cursor, int offset) {
        Meeting entity = new Meeting( //
            cursor.getLong(offset + 0), // _metID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sub
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // keyword1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // keyword2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // keyword3
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // modetator
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Meeting entity, int offset) {
        entity.set_metID(cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSub(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKeyword1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKeyword2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKeyword3(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setModetator(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Meeting entity, long rowId) {
        entity.set_metID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Meeting entity) {
        if(entity != null) {
            return entity.get_metID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Meeting entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
