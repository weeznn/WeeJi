package com.weeznn.weeji.util.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.weeznn.weeji.util.db.entry.People;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PEOPLE".
*/
public class PeopleDao extends AbstractDao<People, Long> {

    public static final String TABLENAME = "PEOPLE";

    /**
     * Properties of entity People.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Phone = new Property(0, long.class, "phone", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property Photo = new Property(3, String.class, "photo", false, "PHOTO");
        public final static Property Company = new Property(4, String.class, "company", false, "COMPANY");
        public final static Property Job = new Property(5, String.class, "job", false, "JOB");
    }


    public PeopleDao(DaoConfig config) {
        super(config);
    }
    
    public PeopleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PEOPLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: phone
                "\"NAME\" TEXT," + // 1: name
                "\"EMAIL\" TEXT," + // 2: email
                "\"PHOTO\" TEXT," + // 3: photo
                "\"COMPANY\" TEXT," + // 4: company
                "\"JOB\" TEXT);"); // 5: job
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PEOPLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, People entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPhone());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(5, company);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(6, job);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, People entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPhone());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(5, company);
        }
 
        String job = entity.getJob();
        if (job != null) {
            stmt.bindString(6, job);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public People readEntity(Cursor cursor, int offset) {
        People entity = new People( //
            cursor.getLong(offset + 0), // phone
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // company
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // job
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, People entity, int offset) {
        entity.setPhone(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCompany(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJob(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(People entity, long rowId) {
        entity.setPhone(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(People entity) {
        if(entity != null) {
            return entity.getPhone();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(People entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
